# Multi-stage build pour optimiser la taille de l'image finale
FROM node:22-alpine3.20 AS builder

# Set the working directory
WORKDIR /app/backend

# Copy package files
COPY package.json package-lock.json ./

# Install ALL dependencies (including devDependencies for build)
RUN npm ci --only=production=false

# Copy source code
COPY . .

# Build the application (si vous avez un build step)
RUN npm run build 2>/dev/null

# Production stage
FROM node:22-alpine3.20 AS production

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001

# Set working directory
WORKDIR /app/backend

# Copy package files
COPY package.json package-lock.json ./

# Install only production dependencies
RUN npm ci --only=production && \
    npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=backend:nodejs /app/backend .

# Remove unnecessary files for production
RUN rm -rf \
    /app/backend/src \
    /app/backend/tests \
    /app/backend/*.md \
    /app/backend/.git* \
    /app/backend/docker* \
    /app/backend/coverage \
    /app/backend/.nyc_output

# Switch to non-root user
USER backend

# Expose port
EXPOSE 8002

CMD [ "npm", "start" ]