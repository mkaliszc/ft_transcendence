services:
  frontend:
    container_name: frontend
    env_file:
      - .env
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - ft_transcendance
    depends_on:
      - db
    restart: always

  backend_profile:
    container_name: profile_service
    env_file:
      - .env
    build:
      context: ./backend/src/profile
      dockerfile: Dockerfile.prod
    networks:
      - ft_transcendance
    depends_on:
        - db
    restart: always

  backend_auth:
    container_name: auth_service
    env_file:
      - .env
    build:
      context: ./backend/src/auth
      dockerfile: Dockerfile.prod
    networks:
      - ft_transcendance
    depends_on:
        - db
    restart: always

  backend_match:
    container_name: match_service
    env_file:
      - .env
    build:
      context: ./backend/src/match
      dockerfile: Dockerfile.prod
    networks:
      - ft_transcendance
    depends_on:
        - db
    restart: always

  db:
    container_name: DataBase
    build:
        context: ./mariadb
        dockerfile: Dockerfile
    env_file:
      - .env
    networks:
      - ft_transcendance
    volumes:
      - db_data:/var/lib/mysql
    restart: always

  ws-server:
    build:
      context: ./frontend/pong-server
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    networks:
      - ft_transcendance
    restart: always

  web:
    container_name: nginx
    env_file:
      - .env
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "8081:80"
      - "5000:5000"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./volumes/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend_auth
      - backend_match
      - backend_profile
    networks:
      - ft_transcendance
    restart: always
    
volumes:
  db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/mariadb/

networks:
  ft_transcendance:
    driver: bridge